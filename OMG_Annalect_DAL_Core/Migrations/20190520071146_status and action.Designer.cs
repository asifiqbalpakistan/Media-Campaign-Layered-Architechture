// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OMG_Annalect_DAL_Core.Data;

namespace OMG_Annalect_DAL_Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190520071146_status and action")]
    partial class statusandaction
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "415c01f9-3b5b-4cf8-a7d8-73e47e39a16b",
                            ConcurrencyStamp = "268792ac-421d-42eb-a010-b431ffef9a5e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d4f5bcd0-eb69-46cb-99a7-693d3dafc54d",
                            ConcurrencyStamp = "9dc36c83-aaf0-44aa-9f96-873b8dc79b56",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "ee8af06b-0d68-42d8-8232-1911dc5ba485",
                            ConcurrencyStamp = "ea26cc2e-6770-4811-ac7c-1b076c894b2c",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "0d149904-c6b8-467f-86db-9e6175f2b260",
                            ConcurrencyStamp = "5ec3e6b4-8d2e-4ce8-a10a-5884955b3f0f",
                            Name = "Planner",
                            NormalizedName = "PLANNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.AdvertisementSupplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedTime");

                    b.Property<double>("Budget");

                    b.Property<long>("CampaignId");

                    b.Property<long>("ChannelId");

                    b.Property<string>("Code");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<long>("SupplierId");

                    b.Property<string>("SupplierName");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("SupplierId");

                    b.ToTable("tblAdvertisementSupplier");
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsDocumentAccess");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.Campaign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedTime");

                    b.Property<double>("Budget");

                    b.Property<long>("ClientId");

                    b.Property<string>("Code");

                    b.Property<string>("Country");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("tblCampaign");
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.CampaignChannel", b =>
                {
                    b.Property<long>("CampaignId");

                    b.Property<long>("ChannelId");

                    b.Property<long>("Id");

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedTime");

                    b.HasKey("CampaignId", "ChannelId", "Id");

                    b.HasAlternateKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("tblCampaignChannel");
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedTime");

                    b.Property<string>("Code");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("tblChannel");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Code = "Social",
                            IsDeleted = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Name = "Social"
                        },
                        new
                        {
                            Id = 2L,
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Code = "Offline",
                            IsDeleted = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Name = "Offline"
                        },
                        new
                        {
                            Id = 3L,
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Code = "OOH",
                            IsDeleted = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Name = "OOH"
                        },
                        new
                        {
                            Id = 4L,
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Code = "Direct Buys",
                            IsDeleted = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Name = "Direct Buys"
                        });
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedTime");

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("Email");

                    b.Property<string>("FaxNumber");

                    b.Property<string>("Industry");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("tblClient");
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedTime");

                    b.Property<string>("Code");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Language");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name");

                    b.Property<string>("Region");

                    b.Property<string>("TimeZone");

                    b.HasKey("Id");

                    b.ToTable("tblCountry");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Code = "UAE",
                            IsDeleted = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 2L,
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Code = "PK",
                            IsDeleted = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Name = "Pakistan"
                        });
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.DocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedTime");

                    b.Property<string>("DocumentTypeName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRequired");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedTime");

                    b.HasKey("Id");

                    b.ToTable("tblDocumentType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddedBy = "Admin",
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            DocumentTypeName = "Ads Broucher",
                            IsDeleted = false,
                            IsRequired = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835)
                        },
                        new
                        {
                            Id = 2L,
                            AddedBy = "Admin",
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            DocumentTypeName = "Wish List",
                            IsDeleted = false,
                            IsRequired = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835)
                        });
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.Documents", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedTime");

                    b.Property<int?>("CampaignId");

                    b.Property<long?>("CampaignId1");

                    b.Property<string>("DocumentName");

                    b.Property<int>("DocumentTypeId");

                    b.Property<long?>("DocumentTypeId1");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<Guid>("guid");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId1");

                    b.HasIndex("DocumentTypeId1");

                    b.ToTable("tblDocuments");
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedTime");

                    b.Property<long>("ChannelId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedTime");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("tblSupplier");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            ChannelId = 1L,
                            IsDeleted = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = 2L,
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            ChannelId = 1L,
                            IsDeleted = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Name = "Twitter"
                        },
                        new
                        {
                            Id = 3L,
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            ChannelId = 2L,
                            IsDeleted = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Name = "Television"
                        },
                        new
                        {
                            Id = 4L,
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            ChannelId = 3L,
                            IsDeleted = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Name = "Billboard"
                        },
                        new
                        {
                            Id = 5L,
                            AddedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            ChannelId = 4L,
                            IsDeleted = false,
                            ModifiedTime = new DateTime(2019, 5, 20, 11, 11, 45, 537, DateTimeKind.Local).AddTicks(3835),
                            Name = "Gulf News"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OMG_Annalect_DAL_Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OMG_Annalect_DAL_Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OMG_Annalect_DAL_Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OMG_Annalect_DAL_Core.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.AdvertisementSupplier", b =>
                {
                    b.HasOne("OMG_Annalect_DAL_Core.Models.Campaign", "Campaign")
                        .WithMany("AdvertisementSuppliers")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OMG_Annalect_DAL_Core.Models.Channel", "Channel")
                        .WithMany("AdvertisementSuppliers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OMG_Annalect_DAL_Core.Models.Supplier", "Supplier")
                        .WithMany("AdvertisementSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.Campaign", b =>
                {
                    b.HasOne("OMG_Annalect_DAL_Core.Models.Client", "Client")
                        .WithMany("Campaigns")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.CampaignChannel", b =>
                {
                    b.HasOne("OMG_Annalect_DAL_Core.Models.Campaign", "Campaign")
                        .WithMany("CampaignChannels")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OMG_Annalect_DAL_Core.Models.Channel", "Channel")
                        .WithMany("CampaignChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OMG_Annalect_DAL_Core.Models.Documents", b =>
                {
                    b.HasOne("OMG_Annalect_DAL_Core.Models.Campaign", "Campaign")
                        .WithMany("Documents")
                        .HasForeignKey("CampaignId1");

                    b.HasOne("OMG_Annalect_DAL_Core.Models.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId1");
                });
#pragma warning restore 612, 618
        }
    }
}
